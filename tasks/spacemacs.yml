---
- name: Installs emacs
  apt: pkg=emacs state=latest
  become_user: root

- name: Backups emacs config
  copy:
    src: "{{ ansible_env.HOME }}/.emacs.d"
    dest: "{{ ansible_env.HOME }}/.emacs.d.bak"
    
- name: Removes emacs config
  file:
    path: "{{ ansible_env.HOME }}/.emacs.d"
    state: absent
  
- name: Adds spacemacs config
  git:
    repo: https://github.com/syl20bnr/spacemacs
    dest: "{{ ansible_env.HOME }}/.emacs.d/"
    force: yes

- name: Adds Dvorak keybinding adoptation
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.profile"
    line: "(define-key key-translation-map [?\\C-x] [?\\C-u])
(define-key key-translation-map [?\\C-u] [?\\C-x])
(define-key key-translation-map [?\\M-x] [?\\M-u])
(define-key key-translation-map [?\\M-u] [?\\M-x])
(global-set-key (kbd \"C-l\") 'paredit-forward-slurp-sexp)
(global-set-key (kbd \"C-h\") 'paredit-forward-barf-sexp)
"

# Tealnet goodies
#(require 'cider)
#(setq cider-cljs-lein-repl
#      "(do (require 'figwheel-sidecar.repl-api)
#           (figwheel-sidecar.repl-api/start-figwheel!)
#           (figwheel-sidecar.repl-api/cljs-repl))")
#
#(defun get-string-from-file (filePath)
#  "Return filePath's file content."
#  (with-temp-buffer
#    (insert-file-contents filePath)
#    (buffer-string)))
#
#(defun load-envs ()
#  (interactive)
#  (-> (get-string-from-file "~/samurai/tealnet/.env")
#      (split-string "\n")
#      (->> (mapcar (lambda (s) (split-string s " ")))
#           (mapcar `rest)
#           (mapcar `string-join)
#           (mapcar (lambda (s)
#                     (setenv
#                      (first (split-string s "="))
#                      (string-join (rest (split-string s "=")) "=")))))))
#
#;;(load-envs)
